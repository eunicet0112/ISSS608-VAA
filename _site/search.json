[
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html",
    "title": "Hands-on-Exercise-1",
<<<<<<< HEAD
=======
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "title": "Hands-on-Exercise-1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "title": "Hands-on-Exercise-1",
    "section": "Using ggplot2",
    "text": "Using ggplot2\n\ngeom_point for drawing individual points (e.g., scatter plot)\ngeom_line for drawing lines (e.g., line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., bar charts)\ngeom_histogram for drawing binned values (e.g., histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map by accessing the data to use using the map_data() function\n\nFor the complete list, please refer here.\n\nPlotting Bar Charts\nThe code chunk below plots a bar chart using geom_bar().\n\nggplot(exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nPlotting Geometric Objects\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y-scale is rather misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_dotplot(binwidth=2.5, \n               dotsize=0.5) + \n  scale_y_continuous(NULL, \n                     breaks=NULL)\n\n\n\n\n\n\nPlotting Histograms\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\nModifying Plots by Changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\nModifying Plots by Changing aes()\nThe code chunk below changes the fill of the histogram by using sub-group of aesthetic().\n\nggplot(exam_data,\n       aes(x=MATHS, \n           fill=GENDER)) + \n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\nPlotting Kernel Density Lines\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Math scores in a kernel density estimate plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using color or fill arguments of aes().\n\nggplot(exam_data, \n       aes(x=MATHS,\n           color=GENDER)) + \n  geom_density()\n\n\n\n\n\n\nPlotting Boxplots\ngeom_boxplot() displays continuous value lists. It visualises five summary statistics (namely median, two hinges and two whiskers) and all individual outlying points.\nThe code chunk below plots boxplots using geom_boxplot().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot()\n\n\n\n\nNotches are used in boxplots to visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different. The code chunk below plots the distribution of Maths scores by gender in notched plots instead of boxplots.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nPlotting Violin Plots\ngeom_violin() is designed for creating violin plots. Violin plots are used to compare multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions as the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions as they are placed side by side.\nThe code below plots the distribution of Math scores by gender in a violin plot.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_violin()\n\n\n\n\n\n\nPlotting Scatterplots\ngeom_point() is especially useful for creating scatterplots. The code chunk below plots a scatterplot showing the Math and English grades of pupils using geom_point().\n\nggplot(exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining geom Objects\nThe code chunk below plots the data points on the boxplot by using both geom_boxplot() and geom_point().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(position=\"jitter\", \n             size=0.5)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "title": "Hands-on-Exercise-1",
    "section": "Adding Summary Statistics into Plots",
    "text": "Adding Summary Statistics into Plots\nThe Statistic functions statistically transform data, usually as some form of summary. For example:\n\nFrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat() - stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overrides the default geom.\n\nggplot(exam_data,\n       aes(y=MATHS, x=GENDER)) +\n  geom_boxplot() + \n  stat_summary(geom=\"point\", \n               fun.y=\"mean\", \n               color=\"red\", \n               size=4)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nWorking with stat() - geom() method\nThe code chunk below adds mean values by using geom() function and overrides the default stat.\n\nggplot(exam_data,\n       aes(y=MATHS, \n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             color=\"red\", \n             size=4)\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", color = \"red\", size =\n4): Ignoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\nAdding a Best Fit Curve on Scatterplots\nThe interpretability of the scatterplot of English against Math grades of pupils can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(exam_data, \n       aes(x=MATHS,\n           y=ENGLISH)) + \n  geom_point() + \n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
>>>>>>> 74b8fdc (commit hands-on exercise 2)
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "title": "Hands-on-Exercise-1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "title": "Hands-on-Exercise-1",
    "section": "Using ggplot2",
    "text": "Using ggplot2\n\ngeom_point for drawing individual points (e.g., scatter plot)\ngeom_line for drawing lines (e.g., line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., bar charts)\ngeom_histogram for drawing binned values (e.g., histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map by accessing the data to use using the map_data() function\n\nFor the complete list, please refer here.\n\nPlotting Bar Charts\nThe code chunk below plots a bar chart using geom_bar().\n\nggplot(exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nPlotting Geometric Objects\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y-scale is rather misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_dotplot(binwidth=2.5, \n               dotsize=0.5) + \n  scale_y_continuous(NULL, \n                     breaks=NULL)\n\n\n\n\n\n\nPlotting Histograms\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\nModifying Plots by Changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\nModifying Plots by Changing aes()\nThe code chunk below changes the fill of the histogram by using sub-group of aesthetic().\n\nggplot(exam_data,\n       aes(x=MATHS, \n           fill=GENDER)) + \n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\nPlotting Kernel Density Lines\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Math scores in a kernel density estimate plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using color or fill arguments of aes().\n\nggplot(exam_data, \n       aes(x=MATHS,\n           color=GENDER)) + \n  geom_density()\n\n\n\n\n\n\nPlotting Boxplots\ngeom_boxplot() displays continuous value lists. It visualises five summary statistics (namely median, two hinges and two whiskers) and all individual outlying points.\nThe code chunk below plots boxplots using geom_boxplot().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot()\n\n\n\n\nNotches are used in boxplots to visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different. The code chunk below plots the distribution of Maths scores by gender in notched plots instead of boxplots.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nPlotting Violin Plots\ngeom_violin() is designed for creating violin plots. Violin plots are used to compare multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions as the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions as they are placed side by side.\nThe code below plots the distribution of Math scores by gender in a violin plot.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_violin()\n\n\n\n\n\n\nPlotting Scatterplots\ngeom_point() is especially useful for creating scatterplots. The code chunk below plots a scatterplot showing the Math and English grades of pupils using geom_point().\n\nggplot(exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining geom Objects\nThe code chunk below plots the data points on the boxplot by using both geom_boxplot() and geom_point().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(position=\"jitter\", \n             size=0.5)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "title": "Hands-on-Exercise-1",
    "section": "Adding Summary Statistics into Plots",
    "text": "Adding Summary Statistics into Plots\nThe Statistic functions statistically transform data, usually as some form of summary. For example:\n\nFrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat() - stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overrides the default geom.\n\nggplot(exam_data,\n       aes(y=MATHS, x=GENDER)) +\n  geom_boxplot() + \n  stat_summary(geom=\"point\", \n               fun.y=\"mean\", \n               color=\"red\", \n               size=4)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nWorking with stat() - geom() method\nThe code chunk below adds mean values by using geom() function and overrides the default stat.\n\nggplot(exam_data,\n       aes(y=MATHS, \n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             color=\"red\", \n             size=4)\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", color = \"red\", size =\n4): Ignoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\nAdding a Best Fit Curve on Scatterplots\nThe interpretability of the scatterplot of English against Math grades of pupils can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(exam_data, \n       aes(x=MATHS,\n           y=ENGLISH)) + \n  geom_point() + \n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#loading-r-packages",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#loading-r-packages",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#importing-pisa-data",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#importing-pisa-data",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "Importing PISA Data",
    "text": "Importing PISA Data\nThe code chunk below uses read_sas() function of haven to import PISA data into the R environment.\n#| eval: false was used to prevent the code chunk from running.\n\nstu_qqq &lt;- read_sas(\"Data/cy08msp_stu_qqq.sas7bdat\")\n\nThe code chunk below uses the filter() function of dplyr to retrieve records from Singapore (SGP) only.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% \n  filter(CNT == \"SGP\")\n\nThe code chunks below uses write_rds() and read_rds() to save and read the records from Singapore in R format.\n\nwrite_rds(stu_qqq_SG, \n          \"Data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
<<<<<<< HEAD
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
=======
    "objectID": "Take_Home_Exercise/Take_Home_Ex01/Take_Home_Ex01.html",
    "href": "Take_Home_Exercise/Take_Home_Ex01/Take_Home_Ex01.html",
    "title": "Is Every School a Good School?",
    "section": "",
    "text": "1. Overview\nIs every school a good school? According to OECD education director Andreas Schleicher, Singapore “managed to achieve excellence without wide differences between children from wealthy and disadvantaged families”. This spells good news for Singapore as its education system strives towards every school being a good school. Yet, public sentiments differs starkly from this. There is a strong belief that disparities continue to exist between elite and neighbourhood schools, between students from higher and lower socioeconomic status, and between students from immigrant and non-immigrant families.\nIn this short exercise, we will study the 2022 Programme for International Student Assessment (PISA) data to reveal the following:\n\nthe distribution of Singapore students’ performance in Mathematics, Reading and Science; and\nthe relationship between the aforementioned performances with schools, gender and socioeconomic status of the students.\n\n\n\n2. Preliminary Set-Up\n\n2.1 Loading Relevant R Packages\nThe following code chunk uses the pacman::p_load() function to install and load the relevant R packages:\n\npacman::p_load(haven, tidyverse, ggplot2, e1071)\n\n\n\n2.2 Importing PISA Dataset\nThe dataset provided for this exercise is extremely large with over 600,000 records from students globally. For the purpose of our task, we will filter the dataset to only include records of students from Singapore (with country code “SGP”). The resultant dataset stu_sg has 6606 records.\nThe data dictionary of all 1279 variables can be found in the PISA 2022 Database Codebook.\n\nstu_qqq &lt;- read_sas(\"Data/cy08msp_stu_qqq.sas7bdat\")\nstu_sg &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\nwrite_rds(stu_sg, \"Data/stu_SG.rds\")\n\n\nstu_sg &lt;- read_rds(\"data/stu_sg.rds\")\n\n\n\n\n3. Distribution of Performance of Singapore Students\nIn this section, the distribution of the performance of students in three subjects, namely Mathematics, Reading and Science, will be studied. PISA reports student performance through plausible values (PV), which can be defined as random values from the posterior distributions. PISA analysts have indicated that there is no substantial differences in using one or all 10 available plausible values in a large sample. Therefore, we will be using Plausible Value 5(PV5) for all subjects in our subsequent analysis.\nThe distributions for each subject will be visualised using violin plots, which can be considered a combination of box plots and kernel density plots. A violin plot was chosen to visualise the distribution of performance scores as it shows the summary statistics and the full distribution of the data.\nProficiency scales, designed by PISA to facilitate reporting of general population-level results rather than results for individual students, were incorporated into the plots as well. The proficiency scales categorises scores into six levels based on subject-specific thresholds, with students in Level 1 being the least proficient in the subject and students in Level 6 being the most proficient. Students scoring below Level 2 are considered low-performing while students scoring at Level 5 or above are considered high-performing. These levels are reflected in the plots through its background colours. Each performance band is shaded a different colour using geom_rect() based on its lower and upper bound provided by PISA.\n\n\n\n\n\n\nDesign Considerations for Violin Plot\n\n\n\n\nPlotting of the performance bands using geom_rect() has to precede all other plots to ensure that it is set as the background of the plot.\nBy default, geom_violin() sets trim=TRUE and the tails of the violins are trimmed. It was thus set to FALSE to ensure the entire range of performance scores is included in the plot.\nThe five-number summary statistics (minimum, first quartile, median, third quartile and maximum in black font) and the mean (in blue font) are displayed on the plot for greater clarity.\n\n\n\n\n3.1 Distribution of Performance in Mathematics\nThe code chunk below defines the performance bands based on the lower and upper bound for scores as stipulated by PISA.\n\nrects_math &lt;- data.frame(ystart = c(46, 420.07, 482.38, 544.68, 606.99, 669.30), \n                    yend = c(420.07, 482.38, 544.68, 606.99, 669.30, 950),\n                    Levels = c(\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5\", \"Level 6\"))\n\nThe code chunk below plots the distribution of Mathematics scores for Singapore students.\n\nggplot(data=stu_sg, aes(x=CNTRYID, y=as.numeric(PV5MATH))) + \n  \n  # Adding background rectangle shading to mark out performance bands\n  geom_rect(data=rects_math,\n            aes(ymin=as.numeric(ystart), ymax=as.numeric(yend), xmin=-Inf, xmax=Inf, fill=Levels),\n            inherit.aes=FALSE, alpha=0.15) +\n  \n  \n  # Adding axis labels, title and subtitle\n  labs(x=\"\", y=\"PV5 Scores for Mathematics\",\n       title=\"Mathematics Scores of Students\", \n       subtitle=\"\\n Mean score labelled in blue. Minimum, quantiles and maximum labelled in black.\") +\n  \n  # Adding violin plot\n  geom_violin(trim=FALSE, color=\"red\", alpha=0) + \n  \n  # Adding boxplot\n  geom_boxplot(width=0.1, color=\"black\", alpha=0) + \n  \n  # Adding summary statistic annotations\n  stat_summary(geom=\"text\", fun.y=quantile, \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.15), size=3) +\n  \n  # Adding mean annotation\n  stat_summary(geom=\"point\", fun.y=\"mean\", color=\"blue\", fill=\"blue\", size=2, shape=21) +\n  stat_summary(geom=\"text\", fun.y=\"mean\", color=\"blue\", \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.09), size=3) + \n\n  # Setting x-axis limits as CNTRYID was used as x-variable arbitrarily - all records have CTRYID of 702\n  scale_x_continuous(limits=c(701.5, 702.5)) +\n  \n  coord_flip() + \n  theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())\n\n\n\n\n\n\n\n\n\n\nInsights on Mathematics Performance\n\n\n\n\nThe mean score for Mathematics is 573.4 while the median score is 580.0. Both scores fall within Level 4 on the Proficiency Scale, indicating that most students in Singapore are moderately proficient in Mathematics.\nThe distribution displays a slight left skew (skewness = -0.246 using skewness()). With the peak or mode of the distribution lying towards the right, there is a larger number of students with performance scores that are closer to the higher end.\nThe lower bound of Level 5 proficiency of 606.99 lies between the median (580.0) and the upper quartile (647.3). This indicates that a rather substantial portion (albeit less than 50%) of students are top performers in Mathematics.\n\n\n\n\n\n3.2 Distribution of Performance in Science\nUsing the same approach as Section 3.1, the violin plot was generated for Science scores.\n\n\nCode\nrects_sci &lt;- data.frame(ystart = c(39, 409.54, 484.14, 558.73, 633.33, 707.93), \n                    yend = c(409.54, 484.14, 558.73, 633.33, 707.93, 924),\n                    Levels = c(\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5\", \"Level 6\"))\n\nggplot(data=stu_sg, aes(x=CNTRYID, y=as.numeric(PV5SCIE))) + \n  \n  # Adding background rectangle shading to mark out performance bands\n  geom_rect(data=rects_sci,\n            aes(ymin=as.numeric(ystart), ymax=as.numeric(yend), xmin=-Inf, xmax=Inf, fill=Levels),\n            inherit.aes=FALSE, alpha=0.15) +\n  \n  \n  # Adding axis labels, title and subtitle\n  labs(x=\"\", y=\"PV5 Scores for Science\",\n       title=\"Science Scores of Students\", \n       subtitle=\"\\n Mean score labelled in blue. Minimum, quantiles and maximum labelled in black.\") +\n  \n  # Adding violin plot\n  geom_violin(trim=FALSE, color=\"red\", alpha=0) + \n  \n  # Adding boxplot\n  geom_boxplot(width=0.1, color=\"black\", alpha=0) + \n  \n  # Adding summary statistic annotations\n  stat_summary(geom=\"text\", fun.y=quantile, \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.15), size=3) +\n  \n  # Adding mean annotation\n  stat_summary(geom=\"point\", fun.y=\"mean\", color=\"blue\", fill=\"blue\", size=2, shape=21) +\n  stat_summary(geom=\"text\", fun.y=\"mean\", color=\"blue\", \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.09), size=3) + \n\n  # Setting x-axis limits as CNTRYID was used as x-variable arbitrarily - all records have CTRYID of 702\n  scale_x_continuous(limits=c(701.5, 702.5)) +\n  \n  coord_flip() + \n  theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())\n\n\n\n\n\n\n\n\n\n\n\nInsights on Science Performance\n\n\n\n\nThe mean score for Science is 561.5 while the median score is 569.7. Both scores fall within Level 4 on the Proficiency Scale, indicating that most students in Singapore are moderately proficient in Science.\nThe distribution displays a slight left skew (skewness = -0.297 using skewness()). With the peak or mode of the distribution lying towards the right, there is a larger number of students with performance scores that are closer to the higher end.\nAround 25% of students attained scores more than or equal to 632.1. With the score point range starting from 633.33 for Level 5, slightly less than 25% of Singapore students are top performers in science.\n\n\n\n\n\n3.3 Distribution of Performance in Reading\nUsing the same approach as Section 3.1, the violin plot was generated for Reading scores.\n\n\nCode\nrects_read &lt;- data.frame(ystart = c(0, 407.47, 480.18, 552.89, 625.61, 698.32), \n                    yend = c(407.47, 480.18, 552.89, 625.61, 698.32, 938),\n                    Levels = c(\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5\", \"Level 6\"))\n\nggplot(data=stu_sg, aes(x=CNTRYID, y=as.numeric(PV5READ))) + \n  \n  # Adding background rectangle shading to mark out performance bands\n  geom_rect(data=rects_sci,\n            aes(ymin=as.numeric(ystart), ymax=as.numeric(yend), xmin=-Inf, xmax=Inf, fill=Levels),\n            inherit.aes=FALSE, alpha=0.15) +\n  \n  \n  # Adding axis labels, title and subtitle\n  labs(x=\"\", y=\"PV5 Scores for Reading\",\n       title=\"Science Scores of Reading\", \n       subtitle=\"\\n Mean score labelled in blue. Minimum, quantiles and maximum labelled in black.\") +\n  \n  # Adding violin plot\n  geom_violin(trim=FALSE, color=\"red\", alpha=0) + \n  \n  # Adding boxplot\n  geom_boxplot(width=0.1, color=\"black\", alpha=0) + \n  \n  # Adding summary statistic annotations\n  stat_summary(geom=\"text\", fun.y=quantile, \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.15), size=3) +\n  \n  # Adding mean annotation\n  stat_summary(geom=\"point\", fun.y=\"mean\", color=\"blue\", fill=\"blue\", size=2, shape=21) +\n  stat_summary(geom=\"text\", fun.y=\"mean\", color=\"blue\", \n               aes(label=sprintf(\"%1.1f\", ..y..)),\n               position=position_nudge(x=0.09), size=3) + \n\n  # Setting x-axis limits as CNTRYID was used as x-variable arbitrarily - all records have CTRYID of 702\n  scale_x_continuous(limits=c(701.5, 702.5)) +\n  \n  coord_flip() + \n  theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html",
    "href": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "This chapter introduces several ggplot2 extensions for creating more elegant and effective statistical graphics. Specifically, the following will be explained:\n\nControlling the placement of annotation on a graph by using functions provided in ggrepel package,\nCreating professional publication quality figures by using functions provided in ggthemes and hrbrthemes packages, and\nPlotting composite figures by combining ggplot2 graphs using patchwork package."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#overview",
    "href": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#overview",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "This chapter introduces several ggplot2 extensions for creating more elegant and effective statistical graphics. Specifically, the following will be explained:\n\nControlling the placement of annotation on a graph by using functions provided in ggrepel package,\nCreating professional publication quality figures by using functions provided in ggthemes and hrbrthemes packages, and\nPlotting composite figures by combining ggplot2 graphs using patchwork package."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#getting-started",
    "href": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#getting-started",
    "title": "ISSS608-VAA",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 Installing and loading required libraries\nFour R packages will be used: - ggrepel: provides geoms for ggplot2 to repel overlapping text labels - ggthemes: provides some extra themes, geoms and scales for ggplot2 - hrbrthemes: provides typography-centric themes and theme components for ggplot2 - patchwork: prepares composite figures creating using ggplot2\nThe code chunk below will be used to check if these packages have been installed and will load them onto the working R environment.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\n\n\n2.2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data tyle and the other three are in continuous data tyle. - The categorical attributes are: ID, CLASS, GENDER and RACE. - The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n2.3 Beying ggplot2 Annotation: ggrepel\nOne of the challenge of plotting statistical graph is annotation, especially with large number of data points.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel is an extension of ggplot2 package to provide geoms for ggplot2 to repel overlapping text as in out example above. We simply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#beyond-ggplot2-themes",
    "title": "ISSS608-VAA",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, namely theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n2.4.1 Working with ggtheme Package\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, Stata, Excel and The Wall Street Journal, among others.\nIn the example below, The Economist theme was used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n2.4.2 Working with hrbrthemes Package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#beyond-single-graph",
    "href": "Hands_On_Exercise/Hands_On_Ex02/Hands_On_Ex02.html#beyond-single-graph",
    "title": "ISSS608-VAA",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions with functions to compose figures with multiple graphs.\nFirst, three statistical graphics are created using the code chunk below.\n\nCode 1Plot 1Code 2Plot 2Code 3Plot 3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nprint(p1)\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nprint(p2)\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nprint(p3)\n\n\n\n\n\n\n\n\n2.5.1 Creating Composite Graphics using patchwork\npatchwork is a ggplot2 extension specifically designed for combining separate ggplot2 graphs into a single figure.\nThe patchwork package has a simple syntax to create layouts easily. Here’s the general syntax that combines: - Two-Column Layout using the plus sign + - Subgroup Plot using parenthesis () - Two-Row Layout using division sign /\n\n\n2.5.2 Combining Two ggplot2 Graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining Three ggplot2 Graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n2.5.4 Creating Composite Figures with Tags\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n2.5.5 Creating Figure with Insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n2.5.6 Creating Composite Figure using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
>>>>>>> 74b8fdc (commit hands-on exercise 2)
  }
]