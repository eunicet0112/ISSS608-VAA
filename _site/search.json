[
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html",
    "title": "Hands-on-Exercise-1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#getting-started",
    "title": "Hands-on-Exercise-1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are installed, they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"Data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#using-ggplot2",
    "title": "Hands-on-Exercise-1",
    "section": "Using ggplot2",
    "text": "Using ggplot2\n\ngeom_point for drawing individual points (e.g., scatter plot)\ngeom_line for drawing lines (e.g., line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., bar charts)\ngeom_histogram for drawing binned values (e.g., histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map by accessing the data to use using the map_data() function\n\nFor the complete list, please refer here.\n\nPlotting Bar Charts\nThe code chunk below plots a bar chart using geom_bar().\n\nggplot(exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nPlotting Geometric Objects\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y-scale is rather misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_dotplot(binwidth=2.5, \n               dotsize=0.5) + \n  scale_y_continuous(NULL, \n                     breaks=NULL)\n\n\n\n\n\n\nPlotting Histograms\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\nModifying Plots by Changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue colour, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(exam_data,\n       aes(x=MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\nModifying Plots by Changing aes()\nThe code chunk below changes the fill of the histogram by using sub-group of aesthetic().\n\nggplot(exam_data,\n       aes(x=MATHS, \n           fill=GENDER)) + \n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\nPlotting Kernel Density Lines\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Math scores in a kernel density estimate plot.\n\nggplot(exam_data, \n       aes(x=MATHS)) + \n  geom_density()\n\n\n\n\nThe code chunk below plots two kernel density lines by using color or fill arguments of aes().\n\nggplot(exam_data, \n       aes(x=MATHS,\n           color=GENDER)) + \n  geom_density()\n\n\n\n\n\n\nPlotting Boxplots\ngeom_boxplot() displays continuous value lists. It visualises five summary statistics (namely median, two hinges and two whiskers) and all individual outlying points.\nThe code chunk below plots boxplots using geom_boxplot().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot()\n\n\n\n\nNotches are used in boxplots to visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different. The code chunk below plots the distribution of Maths scores by gender in notched plots instead of boxplots.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nPlotting Violin Plots\ngeom_violin() is designed for creating violin plots. Violin plots are used to compare multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions as the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions as they are placed side by side.\nThe code below plots the distribution of Math scores by gender in a violin plot.\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_violin()\n\n\n\n\n\n\nPlotting Scatterplots\ngeom_point() is especially useful for creating scatterplots. The code chunk below plots a scatterplot showing the Math and English grades of pupils using geom_point().\n\nggplot(exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining geom Objects\nThe code chunk below plots the data points on the boxplot by using both geom_boxplot() and geom_point().\n\nggplot(exam_data,\n       aes(y=MATHS,\n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(position=\"jitter\", \n             size=0.5)"
  },
  {
    "objectID": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "href": "Hands_On_Exercise/Hands_On_Ex01/Hands_On_Ex01.html#adding-summary-statistics-into-plots",
    "title": "Hands-on-Exercise-1",
    "section": "Adding Summary Statistics into Plots",
    "text": "Adding Summary Statistics into Plots\nThe Statistic functions statistically transform data, usually as some form of summary. For example:\n\nFrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\nWorking with stat() - stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overrides the default geom.\n\nggplot(exam_data,\n       aes(y=MATHS, x=GENDER)) +\n  geom_boxplot() + \n  stat_summary(geom=\"point\", \n               fun.y=\"mean\", \n               color=\"red\", \n               size=4)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nWorking with stat() - geom() method\nThe code chunk below adds mean values by using geom() function and overrides the default stat.\n\nggplot(exam_data,\n       aes(y=MATHS, \n           x=GENDER)) + \n  geom_boxplot() + \n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             color=\"red\", \n             size=4)\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", color = \"red\", size =\n4): Ignoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\nAdding a Best Fit Curve on Scatterplots\nThe interpretability of the scatterplot of English against Math grades of pupils can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(exam_data, \n       aes(x=MATHS,\n           y=ENGLISH)) + \n  geom_point() + \n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#loading-r-packages",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#loading-r-packages",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used:\n\ntidyverse\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#importing-pisa-data",
    "href": "In_Class_Exercise/In_Class_Ex01/In_Class_Ex01.html#importing-pisa-data",
    "title": "In-Class Exercise 1: Now You See It!",
    "section": "Importing PISA Data",
    "text": "Importing PISA Data\nThe code chunk below uses read_sas() function of haven to import PISA data into the R environment.\n#| eval: false was used to prevent the code chunk from running.\n\nstu_qqq &lt;- read_sas(\"Data/cy08msp_stu_qqq.sas7bdat\")\n\nThe code chunk below uses the filter() function of dplyr to retrieve records from Singapore (SGP) only.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% \n  filter(CNT == \"SGP\")\n\nThe code chunks below uses write_rds() and read_rds() to save and read the records from Singapore in R format.\n\nwrite_rds(stu_qqq_SG, \n          \"Data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]